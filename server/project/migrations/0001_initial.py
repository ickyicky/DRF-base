# Generated by Django 2.2.3 on 2019-07-04 19:03

import django.utils.timezone
import django.contrib.auth.models
from django.db import models, migrations


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChangeDefaultPasswordModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_password', models.CharField(max_length=128)),
                ('new_password', models.CharField(max_length=128)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ChangePasswordModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=11)),
                ('old_password', models.CharField(max_length=128)),
                ('new_password', models.CharField(max_length=128)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RestorePasswordModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=11)),
                ('user_id', models.IntegerField()),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TokenAccessModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.TextField(help_text='Token used to access resources.')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TokenModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(help_text='Personal Identity Number (PESEL)', max_length=11, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('remember_me', models.BooleanField(help_text='If this attribute has a value of True the refresh token will\n        be valid for a time defined by the `REMEMBER_ME_REFRESH_TOKEN_LIFETIME`\n        settings variable (30 days by default).\n        ')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TokenPairModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.TextField(help_text='Token used to access resources.')),
                ('refresh_token', models.TextField(help_text='Token used to generate a new Access Token.')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TokenRefreshModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('refresh_token', models.TextField(help_text='Token used to generate a new Access Token.')),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DefaultPasswordModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('password', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ['-created_date'],
            },
        ),
        migrations.CreateModel(
            name='UserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('modified_date', models.DateTimeField(auto_now=True)),
                ('username', models.CharField(help_text="User's ID.", max_length=30, unique=True)),
                ('role', models.CharField(choices=[('Administrator', 'ADMINISTRATOR'), ('User', 'USER')], default='User', help_text="User's role in the system.", max_length=20)),
                ('last_password_change', models.DateTimeField(blank=True, default=None, help_text='Date and time when user changed the password for the last time.', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['-username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
